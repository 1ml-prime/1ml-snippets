Leibniz :> {
  type (<->) a b;
  id 'a: a <-> a;
  to 'a 'b: (a <-> b) -> a -> b;
  from 'a 'b: (a <-> b) -> b -> a;
} = {
  type (<->) a b = wrap (f: t'1) => f a -> f b;
  id = wrap (fun (f: t'1) => id): _ <-> _;
  to eq = (unwrap eq: _ <-> _) Id.t;
  from 'a 'b eq = (unwrap eq: a <-> b) (fun (b: type) => type b -> a) Fun.id;
};
