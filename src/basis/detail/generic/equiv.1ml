;; Leibniz equivalence
Equiv :> EQUIV = {
  type T a b = (type p x) -> p a -> p b;
  type t a b = wrap T a b;
  wr (eq: T _ _) = wrap eq: t _ _;
  un eq = unwrap eq: t _ _;
  (<<) 'a 'b 'c (bc: t b c) (ab: t a b) =
    wr (fun (type p x) => un bc p << un ab p);
  id = wr (fun (type p x) => Fun.id);
  to eq a = un eq Id.t a;
  from 'a 'b (eq: t a b) b = un eq (fun (type b) => type b -> a) Fun.id b;
  inverse 'a 'b (eq: t a b) : t b a =
    wr (fun (type p x) => un eq (fun (type b) => type p b -> p a) Fun.id)
};
