Alt = {...Alt; t = alt};
Fun = {...Fun; type t a b = a -> b};
Opt = {...Opt; t = opt};
Unit = {type t = ()};
Pair = {type t a b = (a, b)};

Sq = {type t a = (a, a)};

BinOp = {type t a = a => a -> a};
BinPr = {type t a = a => a -> Bool.t};

UnOp = {type t a = a -> a};
UnPr = {type t a = a -> Bool.t};

;;

Emb = {type t a b = {to: a -> b; from: b -> Opt.t a}};
Iso = {type t a b = {to: a -> b; from: b -> a}};
Equiv = {type t a b = wrap (type P _) -> P a -> P b};

(<->) = Iso.t;
(<=>) = Equiv.t;

;;

Reader = {type t s e = s -> Opt.t (type (e, s))};
Writer = {type t s e = e => s -> s};

Bounds = {type t v = {min: v; max: v}};

Zero :> {type t} = {type t = ()};

Const = {type t v _ = v};
Id = {type t v = v};
Fork = {type t (type L _) (type R _) a = (L a, R a)};
Compose = {type t (type F _) (type G _) t = F (G t)};

;;

Typing = {
  typeOf 'a (_: a) = type a;
  domOf 'd 'c (_: d -> c) = type d;
  codOf 'd 'c (_: d -> c) = type c;
};

...Typing;

;;

Fun = {
  ...Fun;
  flip f x y = f y x;
  (|>) x f = f x;
};

local ...Fun in
  flip = flip;
  (|>) = (|>);
end;

;;

type t'0 = type;
type t'1 = type => t'0;
type t'2 = type => t'1;
type t'3 = type => t'2;
type t'4 = type => t'3;
